(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{412:function(a,s,t){"use strict";t.r(s);var e=t(1),n=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("div",{attrs:{align:"center"}},[s("h1",[a._v("多态")])]),a._v(" "),s("h2",{attrs:{id:"定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[a._v("#")]),a._v(" 定义")]),a._v(" "),s("blockquote",[s("ol",[s("li",[a._v("多态就是指多种状态，同一个行为，不同的子类表现出不同的形态")]),a._v(" "),s("li",[a._v("多态指同一个方法调用，由于对象不同会产生不同的行为")])])]),a._v(" "),s("h2",{attrs:{id:"好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#好处"}},[a._v("#")]),a._v(" 好处")]),a._v(" "),s("ul",[s("li",[a._v("提高扩展性")]),a._v(" "),s("li",[a._v("符合开闭原则")])]),a._v(" "),s("h2",{attrs:{id:"多态必要条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态必要条件"}},[a._v("#")]),a._v(" 多态必要条件：")]),a._v(" "),s("ul",[s("li",[a._v("继承，发生在继承关系中")]),a._v(" "),s("li",[a._v("重写，子类对父类的方法进行重写")]),a._v(" "),s("li",[a._v("父类引用子类对象")])]),a._v(" "),s("h2",{attrs:{id:"深入认识多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深入认识多态"}},[a._v("#")]),a._v(" 深入认识多态")]),a._v(" "),s("div",{staticClass:"language-Java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" an "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("ul",[s("li",[a._v("上述代码中 左侧的 Animal 是编译前的类型。右侧是运行后识别的类型")])]),a._v(" "),s("h3",{attrs:{id:"从安全的角度理解向上类型转换-向下类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从安全的角度理解向上类型转换-向下类型转换"}},[a._v("#")]),a._v(" 从安全的角度理解向上类型转换/ 向下类型转换")]),a._v(" "),s("div",{staticClass:"language-Java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" an "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("ul",[s("li",[a._v("以上代码其实就是向上类型转换。要知道类 Dog 的字段/方法 一定多余父类 Animal.")]),a._v(" "),s("li",[a._v("所以父类需要的字段以及方法，在子类身上一定会有的，所以可以直接赋值")])]),a._v(" "),s("div",{staticClass:"language-Java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),a._v(" an "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dog")]),a._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" an"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("ul",[s("li",[a._v("但是以上代码"),s("code",[a._v("Dog d = an;")]),a._v(" 是不行的。这种方式是向下类型转换，此时，子类中存在的字段，在父类中不一定存在。")]),a._v(" "),s("li",[a._v("所以这样直接转换是不安全的。必须"),s("code",[a._v("Dog d = (Dog)an;")]),a._v("强制类型转换一下")]),a._v(" "),s("li",[a._v("上述实例中好比，double 以及 int 之间的类型转换")])]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("总而言之，言而总之，"),s("code",[a._v("多的赋值给少的，是可以的。但是少的赋值给多的，是不可以的")])])])]),a._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/a572251465/Java-learn/tree/main/JavaSE/src/com/lihh5",target:"_blank",rel:"noopener noreferrer"}},[a._v("代码实例"),s("OutboundLink")],1)]),a._v(" "),s("h2",{attrs:{id:"多态应用实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态应用实例"}},[a._v("#")]),a._v(" 多态应用实例")]),a._v(" "),s("ul",[s("li",[a._v("父类当做方法的形参，传入具体的子类对象")]),a._v(" "),s("li",[a._v("父类当做方法的返回值，返回具体的子类对象")]),a._v(" "),s("li",[a._v("接口当做方法的形参，传入具体的实现类的对象")]),a._v(" "),s("li",[a._v("接口当做方法的返回值，返回具体的实现类的对象")])])])}),[],!1,null,null,null);s.default=n.exports}}]);