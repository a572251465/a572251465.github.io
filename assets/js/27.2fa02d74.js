(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{406:function(_,a,v){"use strict";v.r(a);var t=v(1),s=Object(t.a)({},(function(){var _=this,a=_._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("div",{attrs:{align:"center"}},[a("h1",[_._v("HashMp 源码解析")])]),_._v(" "),a("blockquote",[a("p",[_._v("深入的学习源码，有助于我们在平常的作业开发过程中更好的使用集合，同时也是知道什么样的集合以及数据结构，在何种场合下使用最为方便")])]),_._v(" "),a("h2",{attrs:{id:"常用重要属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用重要属性"}},[_._v("#")]),_._v(" 常用重要属性")]),_._v(" "),a("ul",[a("li",[a("code",[_._v("DEFAULT_INITIAL_CAPACITY")]),_._v(" 底层数组 默认初始化长度")]),_._v(" "),a("li",[a("code",[_._v("MAXIMUM_CAPACITY")]),_._v(" 最大的设置数组的长度")]),_._v(" "),a("li",[a("code",[_._v("DEFAULT_LOAD_FACTOR")]),_._v(" 表示默认的负载 或扩容因子。判断增加/ 减少空间的依据")]),_._v(" "),a("li",[a("code",[_._v("Node<K,V>[] table")]),_._v(" 表示底层的数据，所有添加的数据 都会存在到该数组中")]),_._v(" "),a("li",[a("code",[_._v("size")]),_._v(" 添加有效数据的大小")]),_._v(" "),a("li",[a("code",[_._v("loadFactor")]),_._v(" 表示作为实例属性，作用于整个 Class 的扩容因子")]),_._v(" "),a("li",[a("code",[_._v("threshold")]),_._v(" 表示扩容的界限值")])]),_._v(" "),a("h2",{attrs:{id:"分析构造器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分析构造器"}},[_._v("#")]),_._v(" 分析构造器")]),_._v(" "),a("hr"),_._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/ab13af6a3643404aa0dc5da50a7b1a0c.png#pic_center",alt:"在这里插入图片描述"}})]),_._v(" "),a("ul",[a("li",[_._v("HashMap 的构造函数大致分为三类：\n"),a("ul",[a("li",[_._v("一种是空构造函数，在初始化的时候，赋值默认的扩容因子")]),_._v(" "),a("li",[_._v("带有初始长度的构造函数，同时将设置初始长度以及默认的扩容因子")]),_._v(" "),a("li",[_._v("两个参数的构造函数，都可以自定义初始长度以及扩容因子，但是有临界值判断")])])])]),_._v(" "),a("h2",{attrs:{id:"put-源码分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#put-源码分析"}},[_._v("#")]),_._v(" put 源码分析")]),_._v(" "),a("hr"),_._v(" "),a("ul",[a("li",[a("p",[_._v("大致思路")]),_._v(" "),a("ul",[a("li",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/c895c8f0726e45c9b2b284c5fab8eb0e.png",alt:"在这里插入图片描述"}})])])]),_._v(" "),a("li",[a("p",[_._v("源码解析")]),_._v(" "),a("ul",[a("li",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/04ad48f34f614c348a5128c72b59a82e.png#pic_center",alt:"在这里插入图片描述"}})])])])]),_._v(" "),a("blockquote",[a("ul",[a("li",[_._v("其实大体的思路跟图 1 差不多，底层也是数组 + 链表的形式来进行存储")]),_._v(" "),a("li",[_._v("在整个 HashMap 的底层存储中 "),a("code",[_._v("key")]),_._v("尤其重要")])]),_._v(" "),a("ol",[a("li",[_._v("会拿到 key 通过"),a("code",[_._v("hash")]),_._v("函数来生成一个 hashCode "),a("code",[_._v("(key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);")])]),_._v(" "),a("li",[_._v("通过 hashCode 以及一定的运算 计算出要放到数组的下标。 运算是"),a("code",[_._v("(n - 1) & hash")])]),_._v(" "),a("li",[_._v("接下来就是更加细节的判断\n3.1 通过计算出来的下标，如果在指定位置是 null 的话，直接将新的节点放入其中. "),a("code",[_._v("tab[i] = newNode(hash, key, value, null);")]),_._v("\n3.2 接下来就是拿到第一个节点后，通过循环判断是否跟当前编辑的数据相同。如果相同就更新，如果不存在相同的话，就直接添加到链表的尾部")])])]),_._v(" "),a("h2",{attrs:{id:"扩容策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩容策略"}},[_._v("#")]),_._v(" 扩容策略")]),_._v(" "),a("hr"),_._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/9d6a1d4960524c6dacbb66705a158493.png#pic_center",alt:"在这里插入图片描述"}})]),_._v(" "),a("ul",[a("li",[_._v("初期执行的时候，数组长度就是默认 16，而扩容界限值 = 长度 * 扩容因子")]),_._v(" "),a("li",[_._v("在到达扩容界限值得时候，长度 = 长度 _ 2, 扩容界限值 = 扩容界限值 _ 2")])]),_._v(" "),a("h2",{attrs:{id:"经典面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#经典面试题"}},[_._v("#")]),_._v(" 经典面试题")]),_._v(" "),a("hr"),_._v(" "),a("ul",[a("li",[_._v("为什么扩容因子/ 负载因子 是 0.75\n"),a("ul",[a("li",[_._v("如果扩容因子是 1 的话，空间利用率得到了很大的满足，但是容易碰撞，容易产生链表，所以查询效率相对较低")]),_._v(" "),a("li",[_._v("如果扩容因子是 0.5 的话，不容易发生碰撞，产生链表的几率比较低，查询效率高，但是空间利用率太低了")]),_._v(" "),a("li",[_._v("所以结合空间以及时间的考虑，在 0.5~1 之间取了一个折中办法")])])])]),_._v(" "),a("hr"),_._v(" "),a("ul",[a("li",[_._v("主数组的长度 为什么一定是 2^n 结果\n"),a("ul",[a("li",[_._v("因为在通过数组长度和 hashCode 计算数组的下标时，满足"),a("code",[_._v("hash & (length - 1)")]),_._v(" => "),a("code",[_._v("hash % length")])]),_._v(" "),a("li",[_._v("上述公式等效的 前提是 length 必须是 2 的整数倍")]),_._v(" "),a("li",[_._v("防止 hash 冲突，位置冲突")])])])]),_._v(" "),a("h2",{attrs:{id:"hashset-底层原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashset-底层原理"}},[_._v("#")]),_._v(" HashSet 底层原理")]),_._v(" "),a("hr"),_._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/ac7a30afdf7e4a8aa4bbb78981d69c4c.png",alt:"在这里插入图片描述"}})]),_._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/93dae3a087fa4a56b64f089a6e324554.png",alt:"在这里插入图片描述"}})])])}),[],!1,null,null,null);a.default=s.exports}}]);